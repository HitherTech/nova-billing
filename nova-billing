#!/usr/bin/python
import inspect
import os
import sys
import time

import kombu
import kombu.entity
import kombu.messaging
import kombu.connection

from nova import exception
from nova import flags


FLAGS = flags.FLAGS

options = {
    "durable": FLAGS.rabbit_durable_queues,
    "auto_delete": False,
    "exclusive": False
}

RAW_LOG = "/var/log/nova/nova-billing-raw.log"
CLEAN_LOG = "/var/log/nova/nova-billing.log"


def add_log(filename, line):
    log_file = open(filename, "a+t")
    print >> log_file, line
    log_file.close()


def get_date_str():
    return time.strftime("%a %b %d %H:%M:%S %Z %Y")


def get_inst_descr(action, payload, message):
    descr = "%s %s routing_key=%s" % (
        get_date_str(),
        action,
        message.delivery_info["routing_key"])
    for attr in ("instance_id", "project_id", "user_id", "instance_type"):
        try:
            descr += " %s=%s" % (attr, payload[attr])
        except KeyError:
            pass
    add_log(CLEAN_LOG, descr)
    add_log(RAW_LOG, descr)


def log_inst_info(inst_info, message):
    if inst_info.get("event_type", None) == "compute.instance.create":
        payload = inst_info.get("payload", {})
        get_inst_descr("created", payload, message)
    elif inst_info.get("event_type", None) == "compute.instance.delete":
        payload = inst_info.get("payload", {})
        get_inst_descr("deleted", payload, message)
    elif inst_info.get("method", None) == "run_instance":
        payload = inst_info["args"]["request_spec"]["instance_properties"].copy()
        payload["instance_id"] = inst_info["args"]["instance_id"]
        payload["instance_type"] = inst_info["args"]["request_spec"]["instance_type"]["name"]
        get_inst_descr("run", payload, message)
    elif inst_info.get("method", None) == "terminate_instance":
        payload = {"instance_id": inst_info["args"]["instance_id"]}
        for attr in "project_id", "user_id":
            payload[attr] = inst_info["_context_" + attr]
        get_inst_descr("terminate", payload, message)


def process_message(body, message):
#    add_log(RAW_LOG, "%s\n%s %s\n\n%s" % ("_" * 60, get_date_str(), message.__dict__, body))

    try:
        log_inst_info(body, message)
    except Exception, ex:
        add_log(RAW_LOG,
                "%s cannot handle message: %s"
                % (get_date_str(), ex))
    message.ack()


class BillingConsumer(object):
    def __init__(self):
        self.params = dict(hostname=FLAGS.rabbit_host,
                          port=FLAGS.rabbit_port,
                          userid=FLAGS.rabbit_userid,
                          password=FLAGS.rabbit_password,
                          virtual_host=FLAGS.rabbit_virtual_host)

        add_log(RAW_LOG, "%s" % self.params)
        self.connection = kombu.connection.BrokerConnection(**self.params)

        exchange = kombu.entity.Exchange(
                name=FLAGS.control_exchange,
                type="topic",
                durable=options["durable"],
                auto_delete=options["auto_delete"])
        self.channel = self.connection.channel()

        self.queue = kombu.entity.Queue(
            name="nova_billing",
            exchange=exchange,
            routing_key="#",
            channel=self.channel,
            **options)

    def consume(self):
        with kombu.messaging.Consumer(
            channel=self.channel,
            queues=self.queue,
            callbacks=[process_message]) as consumer:
            while True:
                self.connection.drain_events()


def main():
    BillingConsumer().consume()


if __name__ == "__main__":
    main()
